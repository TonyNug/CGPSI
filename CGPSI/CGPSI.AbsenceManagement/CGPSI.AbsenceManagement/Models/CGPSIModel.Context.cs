//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CGPSI.AbsenceManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CGPSI_AbsenceDBEntities : DbContext
    {
        public CGPSI_AbsenceDBEntities()
            : base("name=CGPSI_AbsenceDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActivityHistory> ActivityHistories { get; set; }
        public virtual DbSet<ImportHistory> ImportHistories { get; set; }
        public virtual DbSet<LoginHistory> LoginHistories { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<JobTitle> JobTitles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserInGroup> UserInGroups { get; set; }
        public virtual DbSet<UserInRole> UserInRoles { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<UsersEmployee> UsersEmployees { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DataAbsence> DataAbsences { get; set; }
        public virtual DbSet<EmployeeOnSchedule> EmployeeOnSchedules { get; set; }
        public virtual DbSet<ShiftHistory> ShiftHistories { get; set; }
        public virtual DbSet<DayOfWork> DayOfWorks { get; set; }
        public virtual DbSet<ShiftDetail> ShiftDetails { get; set; }
        public virtual DbSet<ViewAbsenceSummary> ViewAbsenceSummaries { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<ViewEmployee> ViewEmployees { get; set; }
        public virtual DbSet<LeaveRequest> LeaveRequests { get; set; }
        public virtual DbSet<LeaveCategories> LeaveCategories1 { get; set; }
        public virtual DbSet<ViewLeaveRequest> ViewLeaveRequests { get; set; }
    
        [DbFunction("CGPSI_AbsenceDBEntities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string splitChar, string stringToSplit)
        {
            var splitCharParameter = splitChar != null ?
                new ObjectParameter("SplitChar", splitChar) :
                new ObjectParameter("SplitChar", typeof(string));
    
            var stringToSplitParameter = stringToSplit != null ?
                new ObjectParameter("stringToSplit", stringToSplit) :
                new ObjectParameter("stringToSplit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[CGPSI_AbsenceDBEntities].[SplitString](@SplitChar, @stringToSplit)", splitCharParameter, stringToSplitParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EMPLOYEES(Nullable<int> iD_Employee, string nIK, string firstName, string lastName, string displayName, string address, string telephone, string email, Nullable<System.DateTime> birthDate, string birthPlace, Nullable<System.DateTime> joinDate, Nullable<int> currentPosition, Nullable<int> currentDepartment, Nullable<bool> isActive, Nullable<System.DateTime> leaveDate, Nullable<int> iD_Supervisor, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> modifedDate, Nullable<int> modifedBy, string statementType)
        {
            var iD_EmployeeParameter = iD_Employee.HasValue ?
                new ObjectParameter("ID_Employee", iD_Employee) :
                new ObjectParameter("ID_Employee", typeof(int));
    
            var nIKParameter = nIK != null ?
                new ObjectParameter("NIK", nIK) :
                new ObjectParameter("NIK", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var joinDateParameter = joinDate.HasValue ?
                new ObjectParameter("JoinDate", joinDate) :
                new ObjectParameter("JoinDate", typeof(System.DateTime));
    
            var currentPositionParameter = currentPosition.HasValue ?
                new ObjectParameter("CurrentPosition", currentPosition) :
                new ObjectParameter("CurrentPosition", typeof(int));
    
            var currentDepartmentParameter = currentDepartment.HasValue ?
                new ObjectParameter("CurrentDepartment", currentDepartment) :
                new ObjectParameter("CurrentDepartment", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var leaveDateParameter = leaveDate.HasValue ?
                new ObjectParameter("LeaveDate", leaveDate) :
                new ObjectParameter("LeaveDate", typeof(System.DateTime));
    
            var iD_SupervisorParameter = iD_Supervisor.HasValue ?
                new ObjectParameter("ID_Supervisor", iD_Supervisor) :
                new ObjectParameter("ID_Supervisor", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifedDateParameter = modifedDate.HasValue ?
                new ObjectParameter("ModifedDate", modifedDate) :
                new ObjectParameter("ModifedDate", typeof(System.DateTime));
    
            var modifedByParameter = modifedBy.HasValue ?
                new ObjectParameter("ModifedBy", modifedBy) :
                new ObjectParameter("ModifedBy", typeof(int));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EMPLOYEES", iD_EmployeeParameter, nIKParameter, firstNameParameter, lastNameParameter, displayNameParameter, addressParameter, telephoneParameter, emailParameter, birthDateParameter, birthPlaceParameter, joinDateParameter, currentPositionParameter, currentDepartmentParameter, isActiveParameter, leaveDateParameter, iD_SupervisorParameter, createdDateParameter, createdByParameter, modifedDateParameter, modifedByParameter, statementTypeParameter);
        }
    
        public virtual ObjectResult<Employee> SP_EMPLOYEES_PagingAndView(string param_paging, string param_where)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("SP_EMPLOYEES_PagingAndView", param_pagingParameter, param_whereParameter);
        }
    
        public virtual ObjectResult<Employee> SP_EMPLOYEES_PagingAndView(string param_paging, string param_where, MergeOption mergeOption)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("SP_EMPLOYEES_PagingAndView", mergeOption, param_pagingParameter, param_whereParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_GROUPS(Nullable<int> iD_Group, string groupName, string statementType)
        {
            var iD_GroupParameter = iD_Group.HasValue ?
                new ObjectParameter("ID_Group", iD_Group) :
                new ObjectParameter("ID_Group", typeof(int));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_GROUPS", iD_GroupParameter, groupNameParameter, statementTypeParameter);
        }
    
        public virtual ObjectResult<Group> SP_GROUPS_PagingAndView(string param_paging, string param_where)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Group>("SP_GROUPS_PagingAndView", param_pagingParameter, param_whereParameter);
        }
    
        public virtual ObjectResult<Group> SP_GROUPS_PagingAndView(string param_paging, string param_where, MergeOption mergeOption)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Group>("SP_GROUPS_PagingAndView", mergeOption, param_pagingParameter, param_whereParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_JOB_TITLES(Nullable<int> iD_JobTitle, string jobTitleName, Nullable<int> parentJobTitle, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, string statementType)
        {
            var iD_JobTitleParameter = iD_JobTitle.HasValue ?
                new ObjectParameter("ID_JobTitle", iD_JobTitle) :
                new ObjectParameter("ID_JobTitle", typeof(int));
    
            var jobTitleNameParameter = jobTitleName != null ?
                new ObjectParameter("JobTitleName", jobTitleName) :
                new ObjectParameter("JobTitleName", typeof(string));
    
            var parentJobTitleParameter = parentJobTitle.HasValue ?
                new ObjectParameter("ParentJobTitle", parentJobTitle) :
                new ObjectParameter("ParentJobTitle", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_JOB_TITLES", iD_JobTitleParameter, jobTitleNameParameter, parentJobTitleParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, statementTypeParameter);
        }
    
        public virtual ObjectResult<JobTitle> SP_JOB_TITLES_PagingAndView(string param_paging, string param_where)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobTitle>("SP_JOB_TITLES_PagingAndView", param_pagingParameter, param_whereParameter);
        }
    
        public virtual ObjectResult<JobTitle> SP_JOB_TITLES_PagingAndView(string param_paging, string param_where, MergeOption mergeOption)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobTitle>("SP_JOB_TITLES_PagingAndView", mergeOption, param_pagingParameter, param_whereParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_USER(Nullable<int> iD_User, string username, string password, Nullable<bool> isActive, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, string statementType)
        {
            var iD_UserParameter = iD_User.HasValue ?
                new ObjectParameter("ID_User", iD_User) :
                new ObjectParameter("ID_User", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_USER", iD_UserParameter, usernameParameter, passwordParameter, isActiveParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, statementTypeParameter);
        }
    
        public virtual int SP_USER_PagingAndView(string param_paging, string param_where)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_USER_PagingAndView", param_pagingParameter, param_whereParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_DEPARTMENTS(Nullable<int> iD_Department, string departmentName, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, string statementType)
        {
            var iD_DepartmentParameter = iD_Department.HasValue ?
                new ObjectParameter("ID_Department", iD_Department) :
                new ObjectParameter("ID_Department", typeof(int));
    
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_DEPARTMENTS", iD_DepartmentParameter, departmentNameParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, statementTypeParameter);
        }
    
        public virtual ObjectResult<Department> SP_DEPARTMENTS_PagingAndView(string param_paging, string param_where)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Department>("SP_DEPARTMENTS_PagingAndView", param_pagingParameter, param_whereParameter);
        }
    
        public virtual ObjectResult<Department> SP_DEPARTMENTS_PagingAndView(string param_paging, string param_where, MergeOption mergeOption)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Department>("SP_DEPARTMENTS_PagingAndView", mergeOption, param_pagingParameter, param_whereParameter);
        }
    
        public virtual int SP_USER_IN_GROUPS_PagingAndView(string param_paging, string param_where)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_USER_IN_GROUPS_PagingAndView", param_pagingParameter, param_whereParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_UserInGroups(Nullable<int> iD_UserInGroups, Nullable<int> iD_User, Nullable<int> iD_Group, string statementType)
        {
            var iD_UserInGroupsParameter = iD_UserInGroups.HasValue ?
                new ObjectParameter("ID_UserInGroups", iD_UserInGroups) :
                new ObjectParameter("ID_UserInGroups", typeof(int));
    
            var iD_UserParameter = iD_User.HasValue ?
                new ObjectParameter("ID_User", iD_User) :
                new ObjectParameter("ID_User", typeof(int));
    
            var iD_GroupParameter = iD_Group.HasValue ?
                new ObjectParameter("ID_Group", iD_Group) :
                new ObjectParameter("ID_Group", typeof(int));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_UserInGroups", iD_UserInGroupsParameter, iD_UserParameter, iD_GroupParameter, statementTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_USER_EMPLOYEE(Nullable<int> iD_UserEmployee, Nullable<int> iD_User, Nullable<int> iD_Employee, string statementType)
        {
            var iD_UserEmployeeParameter = iD_UserEmployee.HasValue ?
                new ObjectParameter("ID_UserEmployee", iD_UserEmployee) :
                new ObjectParameter("ID_UserEmployee", typeof(int));
    
            var iD_UserParameter = iD_User.HasValue ?
                new ObjectParameter("ID_User", iD_User) :
                new ObjectParameter("ID_User", typeof(int));
    
            var iD_EmployeeParameter = iD_Employee.HasValue ?
                new ObjectParameter("ID_Employee", iD_Employee) :
                new ObjectParameter("ID_Employee", typeof(int));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_USER_EMPLOYEE", iD_UserEmployeeParameter, iD_UserParameter, iD_EmployeeParameter, statementTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_USER_IN_ROLES(Nullable<int> iD_UserInRoles, Nullable<int> iD_User, Nullable<int> iD_Role, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, string statementType)
        {
            var iD_UserInRolesParameter = iD_UserInRoles.HasValue ?
                new ObjectParameter("ID_UserInRoles", iD_UserInRoles) :
                new ObjectParameter("ID_UserInRoles", typeof(int));
    
            var iD_UserParameter = iD_User.HasValue ?
                new ObjectParameter("ID_User", iD_User) :
                new ObjectParameter("ID_User", typeof(int));
    
            var iD_RoleParameter = iD_Role.HasValue ?
                new ObjectParameter("ID_Role", iD_Role) :
                new ObjectParameter("ID_Role", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_USER_IN_ROLES", iD_UserInRolesParameter, iD_UserParameter, iD_RoleParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, statementTypeParameter);
        }
    
        public virtual int SP_USER_IN_ROLES_PagingAndView(string param_paging, string param_where)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_USER_IN_ROLES_PagingAndView", param_pagingParameter, param_whereParameter);
        }
    
        public virtual int SP_USER_ROLE_PagingAndView(string param_paging, string param_where)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_USER_ROLE_PagingAndView", param_pagingParameter, param_whereParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_USER_ROLES(Nullable<int> iD_Role, string role, string statementType)
        {
            var iD_RoleParameter = iD_Role.HasValue ?
                new ObjectParameter("ID_Role", iD_Role) :
                new ObjectParameter("ID_Role", typeof(int));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_USER_ROLES", iD_RoleParameter, roleParameter, statementTypeParameter);
        }
    
        public virtual int SP_UserInGroups_PagingAndView(string param_paging, string param_where)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserInGroups_PagingAndView", param_pagingParameter, param_whereParameter);
        }
    
        [DbFunction("CGPSI_AbsenceDBEntities", "GenerateCalendar")]
        public virtual IQueryable<GenerateCalendar_Result> GenerateCalendar(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GenerateCalendar_Result>("[CGPSI_AbsenceDBEntities].[GenerateCalendar](@StartDate, @EndDate)", startDateParameter, endDateParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SP_GetDataAbsenceByDate_Result> SP_GetDataAbsenceByDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDataAbsenceByDate_Result>("SP_GetDataAbsenceByDate");
        }
    
        public virtual ObjectResult<ViewEmployee> SP_ViewEMPLOYEES(string param_paging, string param_where)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewEmployee>("SP_ViewEMPLOYEES", param_pagingParameter, param_whereParameter);
        }
    
        public virtual ObjectResult<ViewEmployee> SP_ViewEMPLOYEES(string param_paging, string param_where, MergeOption mergeOption)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewEmployee>("SP_ViewEMPLOYEES", mergeOption, param_pagingParameter, param_whereParameter);
        }
    
        public virtual int SP_ViewLeaveRequest(string param_paging, string param_where)
        {
            var param_pagingParameter = param_paging != null ?
                new ObjectParameter("param_paging", param_paging) :
                new ObjectParameter("param_paging", typeof(string));
    
            var param_whereParameter = param_where != null ?
                new ObjectParameter("param_where", param_where) :
                new ObjectParameter("param_where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ViewLeaveRequest", param_pagingParameter, param_whereParameter);
        }
    }
}
